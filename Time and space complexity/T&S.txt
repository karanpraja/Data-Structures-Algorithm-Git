Lcm(a,b)*gcd(a,b)=product of two numbers
int a = 0, b = 0;
for (i = 0; i < N; i++) {
	a = a + rand();
}
for (j = 0; j < M; j++) {
	b = b + rand();
}
1.	O(N * M) time, O(1) space
2.	O(N + M) time, O(N + M) space
3.	O(N + M) time, O(1) space
4.	O(N * M) time, O(N + M) space
Output: 
3. O(N + M) time, O(1) space







Explanation: The first loop is O(N) and the second loop is O(M). Since N and M are independent variables, so we can’t say which one is the leading term. Therefore Time complexity of the given problem will be O(N+M).
Since variables size does not depend on the size of the input, therefore  Space Complexity will be constant or O(1)


int a = 0;
for (i = 0; i < N; i++) {
	for (j = N; j > i; j--) {
		a = a + i + j;
	}
}
he above code runs total no of times 
= N + (N – 1) + (N – 2) + … 1 + 0 
= N * (N + 1) / 2 
= 1/2 * N^2 + 1/2 * N 
O(N^2) times.







int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
        k = k + n / 2;
    }
}
 	Explanation: If you notice, j keeps doubling till it is less than or equal to n. Several times, we can double a number till it is less than n would be log(n). 
Let’s take the examples here. 
for n = 16, j = 2, 4, 8, 16 
for n = 32, j = 2, 4, 8, 16, 32 
So, j would run for O(log n) steps. 
i runs for n/2 steps. 
So, total steps = O(n/ 2 * log (n)) = O(n*logn)









for(var i=0;i<n;i++)
	i*=k
. O(logkn)
Explanation: Because loops for the kn-1 times, so after taking log it becomes logkn.

int value = 0;
for(int i=0;i<n;i++)
for(int j=0;j<i;j++)
value += 1;
Explanation: First for loop will run for (n) times and another for loop will be run for (n-1) times as the inner loop will only run till the range i which is 1 less than n , so overall time will be n(n-1). Because a i<k and j<i where i<n and j<n-1)
